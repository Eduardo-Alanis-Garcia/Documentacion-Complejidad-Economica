dplyr::relocate(Título, .after = codigo_act) |>
dplyr::mutate(codigo_act_dos_digitos = substr(x = codigo_act, start = 1, stop = 2))
afinidad_actualizado = merge(x = afinidad_actualizado, y = scian_dos, by.x = "codigo_act_dos_digitos", by.y = "Código", all.x = T)
afinidad_actualizado = afinidad_actualizado |>
dplyr::relocate(codigo_act_dos_digitos, .before = Título_dos_digitos) |>
dplyr::arrange(codigo_act)
View(afinidad__actualizado)
View(afinidad_actualizado)
directorio = "Datos/Originales/Hidalgo/"
archivos_csv = list.files(path = directorio,
pattern = ".csv",
all.files = T,
recursive = T,
full.names = T)
archivos_csv = archivos_csv[!grepl("diccionario", archivos_csv)]
nombres = archivos_csv |>  dirname() |>  dirname() |>  basename()
cat("El archivo csv ha abrir es: ", archivos_csv, "\n")
cat("El archivo csv tiene el nombre: ", nombres, "\n")
#| message: false
#| warning: false
i = 1
denue = read.csv(archivos_csv[i]) |>
dplyr::filter(cve_ent == 13)
####################
### ICE Personal ###
####################
denue_P = denue  |>
dplyr::mutate(per_ocu = dplyr::case_when(
per_ocu == "0 a 5 personas" ~ "2.5",
per_ocu == "6 a 10 personas" ~ "8",
per_ocu == "11 a 30 personas" ~ "20.5",
per_ocu == "31 a 50 personas" ~ "40.5",
per_ocu == "51 a 100 personas" ~ "75.5",
per_ocu == "101 a 250 personas" ~ "175.5",
per_ocu %in% c("251 y más personas", "251 y m\xe1s personas") ~ "251",
TRUE ~ per_ocu
),
per_ocu = as.numeric(per_ocu),
cvegeo = paste0("13", sprintf("%03d", cve_mun))) |>
dplyr::group_by(cvegeo, codigo_act) |>
dplyr::summarise(suma_per_ocu = sum(per_ocu, na.rm = T))
balassa_matriz = economiccomplexity::balassa_index(trade_data = denue_P, country = "cvegeo", product = "codigo_act", value = "suma_per_ocu")
pro = economiccomplexity::proximity(balassa_matriz)
net = economiccomplexity::projections(pro$proximity_country, pro$proximity_product)
pesos_grafo = denue_P |> dplyr::group_by(codigo_act) |>
dplyr::summarise(peso_nodo1 = sum(suma_per_ocu, na.rm = TRUE))
pais = net$network_product
peso_aristas = igraph::edge_attr(pais, "weight")
conexiones = igraph::as_edgelist(pais)
interes = as.data.frame(cbind(conexiones,peso_aristas ))
colnames(interes) = c("nodo1", "nodo2", "peso_arista")
p = merge(x = interes, y = pesos_grafo, by.x = "nodo1", by.y = "codigo_act")
colnames(pesos_grafo)[2] = "peso_nodo2"
p = merge(x = p, y = pesos_grafo, by.x = "nodo2", by.y = "codigo_act")
p = p[, c(2,1,3:5)]
p = p |>
dplyr::mutate(nodo1 = as.numeric(nodo1), nodo2 = as.numeric(nodo2)) |>
dplyr::arrange(nodo1,nodo2)
p |> head()
View(p)
afinidad = read.csv("Datos/Procesados/Actualizados/afinidad_6_nombres.csv")
View(afinidad)
afinidad = afinidad |>
dplyr::select(codigo_act, Título, afinidad_2025A, codigo_act_dos_digitos, Título_dos_digitos)
afinidad = afinidad |>
dplyr::select(codigo_act, Título, afinidad_2025A, codigo_act_dos_digitos, Título_dos_digitos) |>
dplyr::filter(! is.na(afinidad_2025A))
View(afinidad)
source("~/.active-rstudio-document", echo = TRUE)
View(scian_dos)
View(scian)
directorio = "Datos/Originales/Nacional/2025A/"
archivos_csv = list.files(path = directorio, pattern = "\\.csv$", all.files = T, full.names = T, recursive = T)
archivos_csv = archivos_csv[!grepl("diccionario", archivos_csv)]
archivos = lapply(archivos_csv, function(x) {
df = read.csv(x,  fileEncoding = "latin1")
df = df |>
dplyr::select(cve_ent, cve_mun, cve_loc, codigo_act, per_ocu)
df
})
datos = dplyr::bind_rows(archivos)
afinidad_previo = read.csv("Datos/Procesados/Antiguos/afinidad_6_nombres.csv")
afinidad_actualizado = merge(x = afinidad_previo, y = preparacion_afinidad, by = "codigo_act", all.x = T, all.y = T)
afinidad_actualizado = afinidad_actualizado |>
dplyr::relocate(complejidad_producto_2025A:personal_ocupado_2025A, .after = personal_ocupado_2024B) |>
dplyr::relocate(afinidad_2025A, .after = complejidad_producto_2025A) |>
dplyr::relocate(personal_ocupado_2025A, .after = afinidad_2025A)
scian = readxl::read_excel("Datos/scian_2023_categorias_y_productos.xlsx")[,c(1,2)]
names(scian) = scian[1,]
scian = scian[-1,]
scian = scian |>
dplyr::filter(!is.na(Código))
scian_seis = scian |>
dplyr::filter(nchar(Código) == 6) |>
dplyr::mutate(Título = sub("T$", "", Título))
scian_dos = scian |>
dplyr::filter(nchar(Código) == 2) |>
dplyr::mutate(Título = sub("T$", "", Título)) |>
dplyr::rename(Título_dos_digitos = Título)
afinidad_actualizado = afinidad_actualizado |>
dplyr::select(-Título,-codigo_act_dos_digitos,-Título_dos_digitos)
afinidad_actualizado = merge(x = afinidad_actualizado, y = scian_seis, by.x = "codigo_act", by.y = "Código", all.x = T)
afinidad_actualizado = afinidad_actualizado |>
dplyr::relocate(Título, .after = codigo_act) |>
dplyr::mutate(codigo_act_dos_digitos = substr(x = codigo_act, start = 1, stop = 2))
afinidad_actualizado = merge(x = afinidad_actualizado, y = scian_dos, by.x = "codigo_act_dos_digitos", by.y = "Código", all.x = T)
afinidad_actualizado = afinidad_actualizado |>
dplyr::relocate(codigo_act_dos_digitos, .before = Título_dos_digitos) |>
dplyr::mutate(Título_dos_digitos  = dplyr::case_when(
codigo_act_dos_digitos %in% c(31, 32, 33) ~ "Industrias manufactureras",
codigo_act_dos_digitos %in% c(48, 49) ~ "Transportes, correos y almacenamiento",
TRUE ~ Título_dos_digitos
))
dplyr::arrange(codigo_act)
write.csv(afinidad_actualizado, "Datos/Procesados/Actualizados/afinidad_6_nombres.csv", row.names = F, fileEncoding = "UTF-8")
df = datos
denue = datos
datos = denue  |>
dplyr::mutate(per_ocu = dplyr::case_when(
per_ocu == "0 a 5 personas" ~ "2.5",
per_ocu == "6 a 10 personas" ~ "8",
per_ocu == "11 a 30 personas" ~ "20.5",
per_ocu == "31 a 50 personas" ~ "40.5",
per_ocu == "51 a 100 personas" ~ "75.5",
per_ocu == "101 a 250 personas" ~ "175.5",
per_ocu %in% c("251 y más personas", "251 y m\xe1s personas") ~ "251",
TRUE ~ per_ocu
),
per_ocu = as.numeric(per_ocu)
) |>
dplyr::group_by(cve_ent, codigo_act) |>
dplyr::summarise(suma_per_ocu = sum(per_ocu, na.rm = T))
# Calculo de balassa
M = economiccomplexity::balassa_index(trade_data = datos, country = "cve_ent", product = "codigo_act", value = "suma_per_ocu")
# Indice de complejidad producto
complejidad =  economiccomplexity::complexity_measures(balassa_index = M, method = "eigenvalues" )
complejidad_producto = data.frame(names(complejidad$complexity_index_product), complejidad$complexity_index_product)
names(complejidad_producto) = c("codigo_act", "complejidad_producto")
# Afinidad
phi = economiccomplexity::proximity(M)
phi_product = as.matrix(phi$proximity_product)
I = diag(length(rowSums(as.matrix(phi_product))))*(1/rowSums(as.matrix(phi_product)))
matriz_afinidad = (as.matrix(M) %*% t(as.matrix(phi_product))) %*% I
colnames(matriz_afinidad) = colnames(phi_product)
afinidad = cbind(colnames(matriz_afinidad), matriz_afinidad[13,])  # Afinidad de hidalgo
colnames(afinidad) = c("codigo_act", "afinidad")
# Personal por producto
personal = datos |> dplyr::filter(cve_ent == 13) |>
dplyr::group_by(codigo_act) |>
dplyr::summarise(personal_ocupado = sum(suma_per_ocu))
preparacion_afinidad = merge(x = complejidad_producto, y = afinidad, by.x = "codigo_act", by.y = "codigo_act" )
preparacion_afinidad = merge(x = preparacion_afinidad, y = personal, by.x = "codigo_act", by.y = "codigo_act" )
nombres = directorio |>  basename()
names(preparacion_afinidad)[2:ncol(preparacion_afinidad)] = paste0(names(preparacion_afinidad)[2:ncol(preparacion_afinidad)], "_", nombres)
preparacion_afinidad |>  head()
afinidad_previo = read.csv("Datos/Procesados/Antiguos/afinidad_6_nombres.csv")
afinidad_actualizado = merge(x = afinidad_previo, y = preparacion_afinidad, by = "codigo_act", all.x = T, all.y = T)
afinidad_actualizado = afinidad_actualizado |>
dplyr::relocate(complejidad_producto_2025A:personal_ocupado_2025A, .after = personal_ocupado_2024B) |>
dplyr::relocate(afinidad_2025A, .after = complejidad_producto_2025A) |>
dplyr::relocate(personal_ocupado_2025A, .after = afinidad_2025A)
scian = readxl::read_excel("Datos/scian_2023_categorias_y_productos.xlsx")[,c(1,2)]
names(scian) = scian[1,]
scian = scian[-1,]
scian = scian |>
dplyr::filter(!is.na(Código))
scian_seis = scian |>
dplyr::filter(nchar(Código) == 6) |>
dplyr::mutate(Título = sub("T$", "", Título))
scian_dos = scian |>
dplyr::filter(nchar(Código) == 2) |>
dplyr::mutate(Título = sub("T$", "", Título)) |>
dplyr::rename(Título_dos_digitos = Título)
afinidad_actualizado = afinidad_actualizado |>
dplyr::select(-Título,-codigo_act_dos_digitos,-Título_dos_digitos)
afinidad_actualizado = merge(x = afinidad_actualizado, y = scian_seis, by.x = "codigo_act", by.y = "Código", all.x = T)
afinidad_actualizado = afinidad_actualizado |>
dplyr::relocate(Título, .after = codigo_act) |>
dplyr::mutate(codigo_act_dos_digitos = substr(x = codigo_act, start = 1, stop = 2))
afinidad_actualizado = merge(x = afinidad_actualizado, y = scian_dos, by.x = "codigo_act_dos_digitos", by.y = "Código", all.x = T)
afinidad_actualizado = afinidad_actualizado |>
dplyr::relocate(codigo_act_dos_digitos, .before = Título_dos_digitos) |>
dplyr::mutate(Título_dos_digitos  = dplyr::case_when(
codigo_act_dos_digitos %in% c(31, 32, 33) ~ "Industrias manufactureras",
codigo_act_dos_digitos %in% c(48, 49) ~ "Transportes, correos y almacenamiento",
TRUE ~ Título_dos_digitos
))
dplyr::arrange(codigo_act)
write.csv(afinidad_actualizado, "Datos/Procesados/Actualizados/afinidad_6_nombres.csv", row.names = F, fileEncoding = "UTF-8")
afinidad_previo = read.csv("Datos/Procesados/Antiguos/afinidad_6_nombres.csv")
afinidad_actualizado = merge(x = afinidad_previo, y = preparacion_afinidad, by = "codigo_act", all.x = T, all.y = T)
afinidad_actualizado = afinidad_actualizado |>
dplyr::relocate(complejidad_producto_2025A:personal_ocupado_2025A, .after = personal_ocupado_2024B) |>
dplyr::relocate(afinidad_2025A, .after = complejidad_producto_2025A) |>
dplyr::relocate(personal_ocupado_2025A, .after = afinidad_2025A)
scian = readxl::read_excel("Datos/scian_2023_categorias_y_productos.xlsx")[,c(1,2)]
names(scian) = scian[1,]
scian = scian[-1,]
scian = scian |>
dplyr::filter(!is.na(Código))
scian_seis = scian |>
dplyr::filter(nchar(Código) == 6) |>
dplyr::mutate(Título = sub("T$", "", Título))
scian_dos = scian |>
dplyr::filter(nchar(Código) == 2) |>
dplyr::mutate(Título = sub("T$", "", Título)) |>
dplyr::rename(Título_dos_digitos = Título)
afinidad_actualizado = afinidad_actualizado |>
dplyr::select(-Título,-codigo_act_dos_digitos,-Título_dos_digitos)
afinidad_actualizado = merge(x = afinidad_actualizado, y = scian_seis, by.x = "codigo_act", by.y = "Código", all.x = T)
afinidad_actualizado = afinidad_actualizado |>
dplyr::relocate(Título, .after = codigo_act) |>
dplyr::mutate(codigo_act_dos_digitos = substr(x = codigo_act, start = 1, stop = 2))
afinidad_actualizado = merge(x = afinidad_actualizado, y = scian_dos, by.x = "codigo_act_dos_digitos", by.y = "Código", all.x = T)
afinidad_actualizado = afinidad_actualizado |>
dplyr::relocate(codigo_act_dos_digitos, .before = Título_dos_digitos) |>
dplyr::mutate(Título_dos_digitos  = dplyr::case_when(
codigo_act_dos_digitos %in% c(31, 32, 33) ~ "Industrias manufactureras",
codigo_act_dos_digitos %in% c(48, 49) ~ "Transportes, correos y almacenamiento",
TRUE ~ Título_dos_digitos
))
dplyr::arrange(codigo_act)
write.csv(afinidad_actualizado, "Datos/Procesados/Actualizados/afinidad_6_nombres.csv", row.names = F, fileEncoding = "UTF-8")
View(afinidad_actualizado)
afinidad_previo = read.csv("Datos/Procesados/Antiguos/afinidad_6_nombres.csv")
afinidad_actualizado = merge(x = afinidad_previo, y = preparacion_afinidad, by = "codigo_act", all.x = T, all.y = T)
afinidad_actualizado = afinidad_actualizado |>
dplyr::relocate(complejidad_producto_2025A:personal_ocupado_2025A, .after = personal_ocupado_2024B) |>
dplyr::relocate(afinidad_2025A, .after = complejidad_producto_2025A) |>
dplyr::relocate(personal_ocupado_2025A, .after = afinidad_2025A)
scian = readxl::read_excel("Datos/scian_2023_categorias_y_productos.xlsx")[,c(1,2)]
names(scian) = scian[1,]
scian = scian[-1,]
scian = scian |>
dplyr::filter(!is.na(Código))
scian_seis = scian |>
dplyr::filter(nchar(Código) == 6) |>
dplyr::mutate(Título = sub("T$", "", Título))
scian_dos = scian |>
dplyr::filter(nchar(Código) == 2) |>
dplyr::mutate(Título = sub("T$", "", Título)) |>
dplyr::rename(Título_dos_digitos = Título)
afinidad_actualizado = afinidad_actualizado |>
dplyr::select(-Título,-codigo_act_dos_digitos,-Título_dos_digitos)
afinidad_actualizado = merge(x = afinidad_actualizado, y = scian_seis, by.x = "codigo_act", by.y = "Código", all.x = T)
afinidad_actualizado = afinidad_actualizado |>
dplyr::relocate(Título, .after = codigo_act) |>
dplyr::mutate(codigo_act_dos_digitos = substr(x = codigo_act, start = 1, stop = 2))
afinidad_actualizado = merge(x = afinidad_actualizado, y = scian_dos, by.x = "codigo_act_dos_digitos", by.y = "Código", all.x = T)
afinidad_actualizado = afinidad_actualizado |>
dplyr::relocate(codigo_act_dos_digitos, .before = Título_dos_digitos) |>
dplyr::mutate(Título_dos_digitos  = dplyr::case_when(
codigo_act_dos_digitos %in% c(31, 32, 33) ~ "Industrias manufactureras",
codigo_act_dos_digitos %in% c(48, 49) ~ "Transportes, correos y almacenamiento",
TRUE ~ Título_dos_digitos
))
afinidad_previo = read.csv("Datos/Procesados/Antiguos/afinidad_6_nombres.csv")
afinidad_actualizado = merge(x = afinidad_previo, y = preparacion_afinidad, by = "codigo_act", all.x = T, all.y = T)
afinidad_actualizado = afinidad_actualizado |>
dplyr::relocate(complejidad_producto_2025A:personal_ocupado_2025A, .after = personal_ocupado_2024B) |>
dplyr::relocate(afinidad_2025A, .after = complejidad_producto_2025A) |>
dplyr::relocate(personal_ocupado_2025A, .after = afinidad_2025A)
scian = readxl::read_excel("Datos/scian_2023_categorias_y_productos.xlsx")[,c(1,2)]
names(scian) = scian[1,]
scian = scian[-1,]
scian = scian |>
dplyr::filter(!is.na(Código))
scian_seis = scian |>
dplyr::filter(nchar(Código) == 6) |>
dplyr::mutate(Título = sub("T$", "", Título))
scian_dos = scian |>
dplyr::filter(nchar(Código) == 2) |>
dplyr::mutate(Título = sub("T$", "", Título)) |>
dplyr::rename(Título_dos_digitos = Título)
afinidad_actualizado = afinidad_actualizado |>
dplyr::select(-Título,-codigo_act_dos_digitos,-Título_dos_digitos)
afinidad_actualizado = merge(x = afinidad_actualizado, y = scian_seis, by.x = "codigo_act", by.y = "Código", all.x = T)
afinidad_actualizado = afinidad_actualizado |>
dplyr::relocate(Título, .after = codigo_act) |>
dplyr::mutate(codigo_act_dos_digitos = substr(x = codigo_act, start = 1, stop = 2))
afinidad_actualizado = merge(x = afinidad_actualizado, y = scian_dos, by.x = "codigo_act_dos_digitos", by.y = "Código", all.x = T)
afinidad_actualizado = afinidad_actualizado |>
dplyr::relocate(codigo_act_dos_digitos, .before = Título_dos_digitos) |>
dplyr::mutate(Título_dos_digitos  = dplyr::case_when(
codigo_act_dos_digitos %in% c(31, 32, 33) ~ "Industrias manufactureras",
codigo_act_dos_digitos %in% c(48, 49) ~ "Transportes, correos y almacenamiento",
TRUE ~ Título_dos_digitos
)) |>
dplyr::arrange(codigo_act)
write.csv(afinidad_actualizado, "Datos/Procesados/Actualizados/afinidad_6_nombres.csv", row.names = F, fileEncoding = "UTF-8")
#| message: false
#| warning: false
i = 1
denue = read.csv(archivos_csv[i]) |>
dplyr::filter(cve_ent == 13)
####################
### ICE Personal ###
####################
denue_P = denue  |>
dplyr::mutate(per_ocu = dplyr::case_when(
per_ocu == "0 a 5 personas" ~ "2.5",
per_ocu == "6 a 10 personas" ~ "8",
per_ocu == "11 a 30 personas" ~ "20.5",
per_ocu == "31 a 50 personas" ~ "40.5",
per_ocu == "51 a 100 personas" ~ "75.5",
per_ocu == "101 a 250 personas" ~ "175.5",
per_ocu %in% c("251 y más personas", "251 y m\xe1s personas") ~ "251",
TRUE ~ per_ocu
),
per_ocu = as.numeric(per_ocu),
cvegeo = paste0("13", sprintf("%03d", cve_mun))) |>
dplyr::group_by(cvegeo, codigo_act) |>
dplyr::summarise(suma_per_ocu = sum(per_ocu, na.rm = T))
balassa_matriz = economiccomplexity::balassa_index(trade_data = denue_P, country = "cvegeo", product = "codigo_act", value = "suma_per_ocu")
pro = economiccomplexity::proximity(balassa_matriz)
net = economiccomplexity::projections(pro$proximity_country, pro$proximity_product)
pesos_grafo = denue_P |> dplyr::group_by(codigo_act) |>
dplyr::summarise(peso_nodo1 = sum(suma_per_ocu, na.rm = TRUE))
pais = net$network_product
peso_aristas = igraph::edge_attr(pais, "weight")
conexiones = igraph::as_edgelist(pais)
interes = as.data.frame(cbind(conexiones,peso_aristas ))
colnames(interes) = c("nodo1", "nodo2", "peso_arista")
p = merge(x = interes, y = pesos_grafo, by.x = "nodo1", by.y = "codigo_act")
colnames(pesos_grafo)[2] = "peso_nodo2"
p = merge(x = p, y = pesos_grafo, by.x = "nodo2", by.y = "codigo_act")
p = p[, c(2,1,3:5)]
p = p |>
dplyr::mutate(nodo1 = as.numeric(nodo1), nodo2 = as.numeric(nodo2)) |>
dplyr::arrange(nodo1,nodo2)
p |> head()
afinidad = read.csv("Datos/Procesados/Actualizados/afinidad_6_nombres.csv")
afinidad = afinidad |>
dplyr::select(codigo_act, Título, afinidad_2025A, codigo_act_dos_digitos, Título_dos_digitos) |>
dplyr::filter(! is.na(afinidad_2025A))
View(afinidad)
View(afinidad)
View(p)
#| message: false
#| warning: false
i = 1
denue = read.csv(archivos_csv[i]) |>
dplyr::filter(cve_ent == 13)
####################
### ICE Personal ###
####################
denue_P = denue  |>
dplyr::mutate(per_ocu = dplyr::case_when(
per_ocu == "0 a 5 personas" ~ "2.5",
per_ocu == "6 a 10 personas" ~ "8",
per_ocu == "11 a 30 personas" ~ "20.5",
per_ocu == "31 a 50 personas" ~ "40.5",
per_ocu == "51 a 100 personas" ~ "75.5",
per_ocu == "101 a 250 personas" ~ "175.5",
per_ocu %in% c("251 y más personas", "251 y m\xe1s personas") ~ "251",
TRUE ~ per_ocu
),
per_ocu = as.numeric(per_ocu),
cvegeo = paste0("13", sprintf("%03d", cve_mun))) |>
dplyr::group_by(cvegeo, codigo_act) |>
dplyr::summarise(suma_per_ocu = sum(per_ocu, na.rm = T))
balassa_matriz = economiccomplexity::balassa_index(trade_data = denue_P, country = "cvegeo", product = "codigo_act", value = "suma_per_ocu")
pro = economiccomplexity::proximity(balassa_matriz)
net = economiccomplexity::projections(pro$proximity_country, pro$proximity_product)
pesos_grafo = denue_P |> dplyr::group_by(codigo_act) |>
dplyr::summarise(peso_nodo1 = sum(suma_per_ocu, na.rm = TRUE))
pais = net$network_product
peso_aristas = igraph::edge_attr(pais, "weight")
conexiones = igraph::as_edgelist(pais)
interes = as.data.frame(cbind(conexiones,peso_aristas ))
colnames(interes) = c("nodo1", "nodo2", "peso_arista")
p = merge(x = interes, y = pesos_grafo, by.x = "nodo1", by.y = "codigo_act")
colnames(pesos_grafo)[2] = "peso_nodo2"
p = merge(x = p, y = pesos_grafo, by.x = "nodo2", by.y = "codigo_act")
p = p[, c(2,1,3:5)]
p = p |>
dplyr::mutate(nodo1 = as.numeric(nodo1), nodo2 = as.numeric(nodo2)) |>
dplyr::arrange(nodo1,nodo2)
i = 1
denue = read.csv(archivos_csv[i]) |>
dplyr::filter(cve_ent == 13)
View(denue)
directorio = "Datos/Originales/Hidalgo/"
archivos_csv = list.files(path = directorio,
pattern = ".csv",
all.files = T,
recursive = T,
full.names = T)
archivos_csv = archivos_csv[!grepl("diccionario", archivos_csv)]
nombres = archivos_csv |>  dirname() |>  dirname() |>  basename()
cat("El archivo csv ha abrir es: ", archivos_csv, "\n")
cat("El archivo csv tiene el nombre: ", nombres, "\n")
#| message: false
#| warning: false
i = 1
denue = read.csv(archivos_csv[i]) |>
dplyr::filter(cve_ent == 13)
####################
### ICE Personal ###
####################
denue_P = denue  |>
dplyr::mutate(per_ocu = dplyr::case_when(
per_ocu == "0 a 5 personas" ~ "2.5",
per_ocu == "6 a 10 personas" ~ "8",
per_ocu == "11 a 30 personas" ~ "20.5",
per_ocu == "31 a 50 personas" ~ "40.5",
per_ocu == "51 a 100 personas" ~ "75.5",
per_ocu == "101 a 250 personas" ~ "175.5",
per_ocu %in% c("251 y más personas", "251 y m\xe1s personas") ~ "251",
TRUE ~ per_ocu
),
per_ocu = as.numeric(per_ocu),
cvegeo = paste0("13", sprintf("%03d", cve_mun))) |>
dplyr::group_by(cvegeo, codigo_act) |>
dplyr::summarise(suma_per_ocu = sum(per_ocu, na.rm = T))
balassa_matriz = economiccomplexity::balassa_index(trade_data = denue_P, country = "cvegeo", product = "codigo_act", value = "suma_per_ocu")
pro = economiccomplexity::proximity(balassa_matriz)
net = economiccomplexity::projections(pro$proximity_country, pro$proximity_product)
pesos_grafo = denue_P |> dplyr::group_by(codigo_act) |>
dplyr::summarise(peso_nodo1 = sum(suma_per_ocu, na.rm = TRUE))
pais = net$network_product
peso_aristas = igraph::edge_attr(pais, "weight")
conexiones = igraph::as_edgelist(pais)
interes = as.data.frame(cbind(conexiones,peso_aristas ))
colnames(interes) = c("nodo1", "nodo2", "peso_arista")
p = merge(x = interes, y = pesos_grafo, by.x = "nodo1", by.y = "codigo_act")
colnames(pesos_grafo)[2] = "peso_nodo2"
p = merge(x = p, y = pesos_grafo, by.x = "nodo2", by.y = "codigo_act")
p = p[, c(2,1,3:5)]
p = p |>
dplyr::mutate(nodo1 = as.numeric(nodo1), nodo2 = as.numeric(nodo2)) |>
dplyr::arrange(nodo1,nodo2)
p |>  head()
names(p)
afinidad |>  names()
producto = merge(x = p, y = afinidad, by.x = "nodo1", by.y = "codigo_act")
producto = merge(x = p, y = afinidad, by.x = "nodo1", by.y = "codigo_act", all.x = T)
producto = producto |>
dplyr::rename(nodo1_nombre = Título,
nodo1_afinidad = afinidad_2025A,
nodo1_dos_digitos = codigo_act_dos_digitos,
nodo1_dos_digitos_nombre = Título_dos_digitos)
View(producto)
producto = merge(x = producto, y = afinidad, by.x = "nodo2", by.y = "codigo_act", all.x = T)
producto = producto |>
dplyr::rename(nodo2_nombre = Título,
nodo2_afinidad = afinidad_2025A,
nodo2_dos_digitos = codigo_act_dos_digitos,
nodo2_dos_digitos_nombre = Título_dos_digitos) |>
dplyr::select(nodo1, nodo2, nodo1_nombre, nodo2_nombre,
peso_arista, peso_nodo1, peso_nodo2,
nodo1_afinidad, nodo2_afinidad,
nodo1_dos_digitos, nodo2_dos_digitos, nodo1_dos_digitos_nombre, nodo2_dos_digitos_nombre)
View(producto)
afinidad = read.csv("Datos/Procesados/Actualizados/afinidad_6_nombres.csv")
afinidad = afinidad |>
dplyr::select(codigo_act, Título, afinidad_2025A, codigo_act_dos_digitos, Título_dos_digitos) |>
dplyr::filter(! is.na(afinidad_2025A))
producto = merge(x = p, y = afinidad, by.x = "nodo1", by.y = "codigo_act", all.x = T)
producto = producto |>
dplyr::rename(nodo1_nombre = Título,
nodo1_afinidad = afinidad_2025A,
nodo1_dos_digitos = codigo_act_dos_digitos,
nodo1_dos_digitos_nombre = Título_dos_digitos)
producto = merge(x = producto, y = afinidad, by.x = "nodo2", by.y = "codigo_act", all.x = T)
producto = producto |>
dplyr::rename(nodo2_nombre = Título,
nodo2_afinidad = afinidad_2025A,
nodo2_dos_digitos = codigo_act_dos_digitos,
nodo2_dos_digitos_nombre = Título_dos_digitos) |>
dplyr::select(nodo1, nodo2, nodo1_nombre, nodo2_nombre,
peso_arista, peso_nodo1, peso_nodo2,
nodo1_afinidad, nodo2_afinidad,
nodo1_dos_digitos, nodo2_dos_digitos, nodo1_dos_digitos_nombre, nodo2_dos_digitos_nombre) |>
dplyr::arrange(nodo1, nodo2)
View(producto)
#| message: false
#| warning: false
#|
afinidad = read.csv("Datos/Procesados/Actualizados/afinidad_6_nombres.csv")
afinidad = afinidad |>
dplyr::select(codigo_act, Título, afinidad_2025A, codigo_act_dos_digitos, Título_dos_digitos) |>
dplyr::filter(! is.na(afinidad_2025A))
producto = merge(x = p, y = afinidad, by.x = "nodo1", by.y = "codigo_act", all.x = T)
producto = producto |>
dplyr::rename(nodo1_nombre = Título,
nodo1_afinidad = afinidad_2025A,
nodo1_dos_digitos = codigo_act_dos_digitos,
nodo1_dos_digitos_nombre = Título_dos_digitos)
producto = merge(x = producto, y = afinidad, by.x = "nodo2", by.y = "codigo_act", all.x = T)
producto = producto |>
dplyr::rename(nodo2_nombre = Título,
nodo2_afinidad = afinidad_2025A,
nodo2_dos_digitos = codigo_act_dos_digitos,
nodo2_dos_digitos_nombre = Título_dos_digitos) |>
dplyr::select(nodo1, nodo2, nodo1_nombre, nodo2_nombre,
peso_arista, peso_nodo1, peso_nodo2,
nodo1_afinidad, nodo2_afinidad,
nodo1_dos_digitos, nodo2_dos_digitos, nodo1_dos_digitos_nombre, nodo2_dos_digitos_nombre) |>
dplyr::arrange(nodo1, nodo2)
write.csv(producto, paste0("Datos/Procesados/Actualizados/", "grafo_hgo_", nombres[i],".csv"), row.names = F, fileEncoding = "UTF-8")
producto |>  head()
directorio = "Datos/Originales/Nacional/2025A/"
archivos_csv = list.files(path = directorio, pattern = "\\.csv$", all.files = T, full.names = T, recursive = T)
archivos_csv = archivos_csv[!grepl("diccionario", archivos_csv)]
archivos = lapply(archivos_csv, function(x) {
df = read.csv(x,  fileEncoding = "latin1")
df = df |>
dplyr::select(cve_ent, cve_mun, cve_loc, codigo_act, per_ocu)
df
})
datos = dplyr::bind_rows(archivos)
